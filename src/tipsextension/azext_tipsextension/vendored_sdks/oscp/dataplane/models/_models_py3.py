# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.2.1, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional

import msrest.serialization


class Amount(msrest.serialization.Model):
    """The amount in specific currency.

    All required parameters must be populated in order to send to Azure.

    :param value: Required.
    :type value: float
    :param currency:
    :type currency: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        currency: Optional[str] = None,
        **kwargs
    ):
        super(Amount, self).__init__(**kwargs)
        self.value = value
        self.currency = currency


class AvailableWarehouseItems(msrest.serialization.Model):
    """AvailableWarehouseItems.

    :param warehouse_id:
    :type warehouse_id: str
    :param available_items:
    :type available_items: list[~oscp.dataplane.models.WarehouseItem]
    """

    _attribute_map = {
        'warehouse_id': {'key': 'warehouseId', 'type': 'str'},
        'available_items': {'key': 'availableItems', 'type': '[WarehouseItem]'},
    }

    def __init__(
        self,
        *,
        warehouse_id: Optional[str] = None,
        available_items: Optional[List["WarehouseItem"]] = None,
        **kwargs
    ):
        super(AvailableWarehouseItems, self).__init__(**kwargs)
        self.warehouse_id = warehouse_id
        self.available_items = available_items


class Barcode(msrest.serialization.Model):
    """Barcode.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The barcode value.
    :type value: str
    :param standard_name: Required. The barcode standard name.
    :type standard_name: str
    """

    _validation = {
        'value': {'required': True, 'min_length': 1},
        'standard_name': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'standard_name': {'key': 'standardName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: str,
        standard_name: str,
        **kwargs
    ):
        super(Barcode, self).__init__(**kwargs)
        self.value = value
        self.standard_name = standard_name


class BaseNode(msrest.serialization.Model):
    """The base model of a location node's information.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The node identifier.
    :type id: str
    :param hours_of_operations: Required. A list of operation times.
    :type hours_of_operations: list[~oscp.dataplane.models.HoursOfOperation]
    :param location: Required. A location of a physical structure.
    :type location: ~oscp.dataplane.models.Location
    :param labels:
    :type labels: list[str]
    :param last_modified_time:
    :type last_modified_time: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True, 'min_length': 1},
        'hours_of_operations': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'hours_of_operations': {'key': 'hoursOfOperations', 'type': '[HoursOfOperation]'},
        'location': {'key': 'location', 'type': 'Location'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: str,
        hours_of_operations: List["HoursOfOperation"],
        location: "Location",
        labels: Optional[List[str]] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(BaseNode, self).__init__(**kwargs)
        self.id = id
        self.hours_of_operations = hours_of_operations
        self.location = location
        self.labels = labels
        self.last_modified_time = last_modified_time


class BulkResponseItemOfDeliveryNode(msrest.serialization.Model):
    """The generic bulk response object of type T.

    All required parameters must be populated in order to send to Azure.

    :param status_code: Required. The bulk action's response status code.
    :type status_code: int
    :param response: The bulk action's responded object of type T.
    :type response: ~oscp.dataplane.models.DeliveryNode
    :param error: The code and message for an error.
    :type error: ~oscp.dataplane.models.ErrorObject
    :param request: The request object of type T for bulk action.
    :type request: ~oscp.dataplane.models.DeliveryNode
    """

    _validation = {
        'status_code': {'required': True},
    }

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'response': {'key': 'response', 'type': 'DeliveryNode'},
        'error': {'key': 'error', 'type': 'ErrorObject'},
        'request': {'key': 'request', 'type': 'DeliveryNode'},
    }

    def __init__(
        self,
        *,
        status_code: int,
        response: Optional["DeliveryNode"] = None,
        error: Optional["ErrorObject"] = None,
        request: Optional["DeliveryNode"] = None,
        **kwargs
    ):
        super(BulkResponseItemOfDeliveryNode, self).__init__(**kwargs)
        self.status_code = status_code
        self.response = response
        self.error = error
        self.request = request


class BulkResponseItemOfItem(msrest.serialization.Model):
    """The generic bulk response object of type T.

    All required parameters must be populated in order to send to Azure.

    :param status_code: Required. The bulk action's response status code.
    :type status_code: int
    :param response: The bulk action's responded object of type T.
    :type response: ~oscp.dataplane.models.Item
    :param error: The code and message for an error.
    :type error: ~oscp.dataplane.models.ErrorObject
    :param request: The request object of type T for bulk action.
    :type request: ~oscp.dataplane.models.Item
    """

    _validation = {
        'status_code': {'required': True},
    }

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'response': {'key': 'response', 'type': 'Item'},
        'error': {'key': 'error', 'type': 'ErrorObject'},
        'request': {'key': 'request', 'type': 'Item'},
    }

    def __init__(
        self,
        *,
        status_code: int,
        response: Optional["Item"] = None,
        error: Optional["ErrorObject"] = None,
        request: Optional["Item"] = None,
        **kwargs
    ):
        super(BulkResponseItemOfItem, self).__init__(**kwargs)
        self.status_code = status_code
        self.response = response
        self.error = error
        self.request = request


class BulkResponseItemOfString(msrest.serialization.Model):
    """The generic bulk response object of type T.

    All required parameters must be populated in order to send to Azure.

    :param status_code: Required. The bulk action's response status code.
    :type status_code: int
    :param response: The bulk action's responded object of type T.
    :type response: str
    :param error: The code and message for an error.
    :type error: ~oscp.dataplane.models.ErrorObject
    :param request: The request object of type T for bulk action.
    :type request: str
    """

    _validation = {
        'status_code': {'required': True},
    }

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'response': {'key': 'response', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ErrorObject'},
        'request': {'key': 'request', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status_code: int,
        response: Optional[str] = None,
        error: Optional["ErrorObject"] = None,
        request: Optional[str] = None,
        **kwargs
    ):
        super(BulkResponseItemOfString, self).__init__(**kwargs)
        self.status_code = status_code
        self.response = response
        self.error = error
        self.request = request


class BulkResponseItemOfWarehouse(msrest.serialization.Model):
    """The generic bulk response object of type T.

    All required parameters must be populated in order to send to Azure.

    :param status_code: Required. The bulk action's response status code.
    :type status_code: int
    :param response: The bulk action's responded object of type T.
    :type response: ~oscp.dataplane.models.Warehouse
    :param error: The code and message for an error.
    :type error: ~oscp.dataplane.models.ErrorObject
    :param request: The request object of type T for bulk action.
    :type request: ~oscp.dataplane.models.Warehouse
    """

    _validation = {
        'status_code': {'required': True},
    }

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'response': {'key': 'response', 'type': 'Warehouse'},
        'error': {'key': 'error', 'type': 'ErrorObject'},
        'request': {'key': 'request', 'type': 'Warehouse'},
    }

    def __init__(
        self,
        *,
        status_code: int,
        response: Optional["Warehouse"] = None,
        error: Optional["ErrorObject"] = None,
        request: Optional["Warehouse"] = None,
        **kwargs
    ):
        super(BulkResponseItemOfWarehouse, self).__init__(**kwargs)
        self.status_code = status_code
        self.response = response
        self.error = error
        self.request = request


class BulkResponseItemOfWarehouseItem(msrest.serialization.Model):
    """The generic bulk response object of type T.

    All required parameters must be populated in order to send to Azure.

    :param status_code: Required. The bulk action's response status code.
    :type status_code: int
    :param response: The bulk action's responded object of type T.
    :type response: ~oscp.dataplane.models.WarehouseItem
    :param error: The code and message for an error.
    :type error: ~oscp.dataplane.models.ErrorObject
    :param request: The request object of type T for bulk action.
    :type request: ~oscp.dataplane.models.WarehouseItem
    """

    _validation = {
        'status_code': {'required': True},
    }

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'response': {'key': 'response', 'type': 'WarehouseItem'},
        'error': {'key': 'error', 'type': 'ErrorObject'},
        'request': {'key': 'request', 'type': 'WarehouseItem'},
    }

    def __init__(
        self,
        *,
        status_code: int,
        response: Optional["WarehouseItem"] = None,
        error: Optional["ErrorObject"] = None,
        request: Optional["WarehouseItem"] = None,
        **kwargs
    ):
        super(BulkResponseItemOfWarehouseItem, self).__init__(**kwargs)
        self.status_code = status_code
        self.response = response
        self.error = error
        self.request = request


class Carrier(msrest.serialization.Model):
    """Carrier.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The unique identifier of a Carrier.
    :type id: str
    :param type: Required. The Carrier's type, can only be what OSCP supports.
    :type type: str
    :param notes: Carrier side account Id, meter ID etc., which will be used when querying the
     carrier.
    :type notes: list[~oscp.dataplane.models.Note]
    """

    _validation = {
        'id': {'required': True, 'max_length': 128, 'min_length': 1},
        'type': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'notes': {'key': 'notes', 'type': '[Note]'},
    }

    def __init__(
        self,
        *,
        id: str,
        type: str,
        notes: Optional[List["Note"]] = None,
        **kwargs
    ):
        super(Carrier, self).__init__(**kwargs)
        self.id = id
        self.type = type
        self.notes = notes


class CarrierReference(msrest.serialization.Model):
    """CarrierReference.

    All required parameters must be populated in order to send to Azure.

    :param carrier_id: Required. Id of the associated Carrier.
    :type carrier_id: str
    :param cutoff_time: Required. Carrier's cutoff time relative to the warehouse.
    :type cutoff_time: str
    :param serving_locations: Serving Locations which contains a list of zipcode the current
     carrier can serve to.
     Null or empty list means this carrier can serve to any zipcode.
    :type serving_locations: list[~oscp.dataplane.models.Location]
    :param serving_node_ids: Serving Node identifiers, which contains a list of node Ids the
     current carrier can serve to.
     Null or empty list means this carrier can serve to any node.
    :type serving_node_ids: list[str]
    """

    _validation = {
        'carrier_id': {'required': True, 'min_length': 1},
        'cutoff_time': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'carrier_id': {'key': 'carrierId', 'type': 'str'},
        'cutoff_time': {'key': 'cutoffTime', 'type': 'str'},
        'serving_locations': {'key': 'servingLocations', 'type': '[Location]'},
        'serving_node_ids': {'key': 'servingNodeIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        carrier_id: str,
        cutoff_time: str,
        serving_locations: Optional[List["Location"]] = None,
        serving_node_ids: Optional[List[str]] = None,
        **kwargs
    ):
        super(CarrierReference, self).__init__(**kwargs)
        self.carrier_id = carrier_id
        self.cutoff_time = cutoff_time
        self.serving_locations = serving_locations
        self.serving_node_ids = serving_node_ids


class Connector(msrest.serialization.Model):
    """Connector.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the connector. Example- CustomIngestion, CustomExport,
     FilterAndCopy.
    :type type: str
    :param type_properties: Required. Properties pertaining to the connector type.
    :type type_properties: dict[str, str]
    :param output: Contains the output params that would be surfaced back to the customer.
     For example, in case of FilterAndCopy connector, invitationId and ADS location would be
     returned as part of the response.
    :type output: dict[str, str]
    """

    _validation = {
        'type': {'required': True, 'min_length': 1},
        'type_properties': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'type_properties': {'key': 'typeProperties', 'type': '{str}'},
        'output': {'key': 'output', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        type: str,
        type_properties: Dict[str, str],
        output: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(Connector, self).__init__(**kwargs)
        self.type = type
        self.type_properties = type_properties
        self.output = output


class DataInflow(msrest.serialization.Model):
    """DataInflow.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Gets or sets the DataInflow name
     Immutable and unique within a workspace
     This would be the unique identifier for a DataInflow. Provided by the user as a mandatory URL
     param.
    :type name: str
    :param display_name: Required. Gets or sets the display name for DataInflow.
    :type display_name: str
    :param dataset_name: Required. Gets or sets the Dataset Name for the Connector.
    :type dataset_name: str
    :param connector: Required. Gets or sets the Connector details.
    :type connector: ~oscp.dataplane.models.Connector
    :param transformer: The DataInflow Transformer.
    :type transformer: ~oscp.dataplane.models.Transformer
    :param state: Gets or sets the state for DataInflow.
    :type state: str
    """

    _validation = {
        'name': {'required': True, 'max_length': 128, 'min_length': 1},
        'display_name': {'required': True, 'min_length': 1},
        'dataset_name': {'required': True, 'min_length': 1},
        'connector': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'dataset_name': {'key': 'datasetName', 'type': 'str'},
        'connector': {'key': 'connector', 'type': 'Connector'},
        'transformer': {'key': 'transformer', 'type': 'Transformer'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        display_name: str,
        dataset_name: str,
        connector: "Connector",
        transformer: Optional["Transformer"] = None,
        state: Optional[str] = None,
        **kwargs
    ):
        super(DataInflow, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.dataset_name = dataset_name
        self.connector = connector
        self.transformer = transformer
        self.state = state


class DataInflowRun(msrest.serialization.Model):
    """DataInflowRun.

    :param data_inflow_name: Gets or sets the DataInflow name
     Immutable and unique within a workspace.
    :type data_inflow_name: str
    :param run_params: Gets or sets the parameters required for run specific to a connector type.
    :type run_params: dict[str, str]
    :param data_inflow_run_id: Gets or sets the run Id for DataInflowRun.
    :type data_inflow_run_id: str
    :param triggered_at: Gets or Sets the triggered time for DataInflowRun.
    :type triggered_at: ~datetime.datetime
    :param completed_at: Gets or Sets the completed time for DataInflowRun.
    :type completed_at: ~datetime.datetime
    :param status: Gets or Sets the status for DataInflowRun.
    :type status: str
    """

    _attribute_map = {
        'data_inflow_name': {'key': 'dataInflowName', 'type': 'str'},
        'run_params': {'key': 'runParams', 'type': '{str}'},
        'data_inflow_run_id': {'key': 'dataInflowRunId', 'type': 'str'},
        'triggered_at': {'key': 'triggeredAt', 'type': 'iso-8601'},
        'completed_at': {'key': 'completedAt', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_inflow_name: Optional[str] = None,
        run_params: Optional[Dict[str, str]] = None,
        data_inflow_run_id: Optional[str] = None,
        triggered_at: Optional[datetime.datetime] = None,
        completed_at: Optional[datetime.datetime] = None,
        status: Optional[str] = None,
        **kwargs
    ):
        super(DataInflowRun, self).__init__(**kwargs)
        self.data_inflow_name = data_inflow_name
        self.run_params = run_params
        self.data_inflow_run_id = data_inflow_run_id
        self.triggered_at = triggered_at
        self.completed_at = completed_at
        self.status = status


class DataOutflow(msrest.serialization.Model):
    """DataOutflow.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The DataOutflow name which is immutable and unique within a workspace.
     This would be the unique identifier for a DataOutflow. Provided by the user as a mandatory URL
     param.
    :type name: str
    :param display_name: Required. The display name for DataOutflow.
    :type display_name: str
    :param description: Required. The description of DataOutflow.
    :type description: str
    :param dataset_name: Required. Gets or sets the Dataset Name for the Connector.
    :type dataset_name: str
    :param connector: Required. The DataOutflow Connector.
    :type connector: ~oscp.dataplane.models.Connector
    :param transformer: The DataOutflow Transformer.
    :type transformer: ~oscp.dataplane.models.Transformer
    :param state: The state of the DataOutflow.
    :type state: str
    """

    _validation = {
        'name': {'required': True, 'max_length': 128, 'min_length': 1},
        'display_name': {'required': True, 'min_length': 1},
        'description': {'required': True, 'min_length': 1},
        'dataset_name': {'required': True, 'min_length': 1},
        'connector': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'dataset_name': {'key': 'datasetName', 'type': 'str'},
        'connector': {'key': 'connector', 'type': 'Connector'},
        'transformer': {'key': 'transformer', 'type': 'Transformer'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        display_name: str,
        description: str,
        dataset_name: str,
        connector: "Connector",
        transformer: Optional["Transformer"] = None,
        state: Optional[str] = None,
        **kwargs
    ):
        super(DataOutflow, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.description = description
        self.dataset_name = dataset_name
        self.connector = connector
        self.transformer = transformer
        self.state = state


class DataOutflowRun(msrest.serialization.Model):
    """DataOutflowRun.

    :param data_outflow_name: Gets or sets the Data Outflow name.
    :type data_outflow_name: str
    :param data_outflow_run_id: Gets or sets the Data Outflow Run Id.
    :type data_outflow_run_id: str
    :param run_params: Gets or sets the parameters specific to a connector type.
    :type run_params: dict[str, str]
    :param status: Gets or sets status of Data Outflow Run.
    :type status: str
    :param triggered_at: Gets or Sets the triggered time for Data Outflow Run.
    :type triggered_at: ~datetime.datetime
    :param completed_at: Gets or Sets the completed time for Data Outflow Run.
    :type completed_at: ~datetime.datetime
    :param triggered_by: Get or sets mechanism via which this run was triggered. Currently via API
     or Datset Ingestion Completion event.
    :type triggered_by: str
    :param trigger_id: Get or set Identifier of triggering mechanism.
    :type trigger_id: str
    """

    _attribute_map = {
        'data_outflow_name': {'key': 'dataOutflowName', 'type': 'str'},
        'data_outflow_run_id': {'key': 'dataOutflowRunId', 'type': 'str'},
        'run_params': {'key': 'runParams', 'type': '{str}'},
        'status': {'key': 'status', 'type': 'str'},
        'triggered_at': {'key': 'triggeredAt', 'type': 'iso-8601'},
        'completed_at': {'key': 'completedAt', 'type': 'iso-8601'},
        'triggered_by': {'key': 'triggeredBy', 'type': 'str'},
        'trigger_id': {'key': 'triggerId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_outflow_name: Optional[str] = None,
        data_outflow_run_id: Optional[str] = None,
        run_params: Optional[Dict[str, str]] = None,
        status: Optional[str] = None,
        triggered_at: Optional[datetime.datetime] = None,
        completed_at: Optional[datetime.datetime] = None,
        triggered_by: Optional[str] = None,
        trigger_id: Optional[str] = None,
        **kwargs
    ):
        super(DataOutflowRun, self).__init__(**kwargs)
        self.data_outflow_name = data_outflow_name
        self.data_outflow_run_id = data_outflow_run_id
        self.run_params = run_params
        self.status = status
        self.triggered_at = triggered_at
        self.completed_at = completed_at
        self.triggered_by = triggered_by
        self.trigger_id = trigger_id


class Dataset(msrest.serialization.Model):
    """Dataset.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Gets or sets the name.
    :type name: str
    :param is_disabled: Required. Gets or sets a value indicating whether gets or sets the
     isdisabled.
    :type is_disabled: bool
    :param operational_type: Gets or sets the operational type : represents whether data is
     transactional (Cosmos) or long term (ADLS).
    :type operational_type: str
    :param schema_reference: Gets or sets the schemaReference.
    :type schema_reference: ~oscp.dataplane.models.SchemaReference
    """

    _validation = {
        'name': {'required': True, 'min_length': 1},
        'is_disabled': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_disabled': {'key': 'isDisabled', 'type': 'bool'},
        'operational_type': {'key': 'operationalType', 'type': 'str'},
        'schema_reference': {'key': 'schemaReference', 'type': 'SchemaReference'},
    }

    def __init__(
        self,
        *,
        name: str,
        is_disabled: bool,
        operational_type: Optional[str] = None,
        schema_reference: Optional["SchemaReference"] = None,
        **kwargs
    ):
        super(Dataset, self).__init__(**kwargs)
        self.name = name
        self.is_disabled = is_disabled
        self.operational_type = operational_type
        self.schema_reference = schema_reference


class DeliveryNode(BaseNode):
    """The operating details of delivery location, for example, location, operation hours, etc.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The node identifier.
    :type id: str
    :param hours_of_operations: Required. A list of operation times.
    :type hours_of_operations: list[~oscp.dataplane.models.HoursOfOperation]
    :param location: Required. A location of a physical structure.
    :type location: ~oscp.dataplane.models.Location
    :param labels:
    :type labels: list[str]
    :param last_modified_time:
    :type last_modified_time: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True, 'min_length': 1},
        'hours_of_operations': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'hours_of_operations': {'key': 'hoursOfOperations', 'type': '[HoursOfOperation]'},
        'location': {'key': 'location', 'type': 'Location'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: str,
        hours_of_operations: List["HoursOfOperation"],
        location: "Location",
        labels: Optional[List[str]] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(DeliveryNode, self).__init__(id=id, hours_of_operations=hours_of_operations, location=location, labels=labels, last_modified_time=last_modified_time, **kwargs)


class Directory(msrest.serialization.Model):
    """Directory.

    :param ingestion_time: Gets or sets the SnapshotTime.
    :type ingestion_time: str
    :param increment_type: Gets or sets the IncrementType.
    :type increment_type: str
    """

    _attribute_map = {
        'ingestion_time': {'key': 'ingestionTime', 'type': 'str'},
        'increment_type': {'key': 'incrementType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ingestion_time: Optional[str] = None,
        increment_type: Optional[str] = None,
        **kwargs
    ):
        super(Directory, self).__init__(**kwargs)
        self.ingestion_time = ingestion_time
        self.increment_type = increment_type


class ErrorObject(msrest.serialization.Model):
    """The code and message of error detail.

    :param code: The error's code.
    :type code: str
    :param message: The human readable error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ErrorObject, self).__init__(**kwargs)
        self.code = code
        self.message = message


class FulfillmentOption(msrest.serialization.Model):
    """The option of fulfillment.

    :param fulfillment_option_id: The identifier of a fulfillment option.
    :type fulfillment_option_id: str
    :param shipment_to_location: A location of a physical structure.
    :type shipment_to_location: ~oscp.dataplane.models.Location
    :param overall_cost: The amount in specific currency.
    :type overall_cost: ~oscp.dataplane.models.Amount
    :param earliest_delivery_time: The earliest delivery time.
    :type earliest_delivery_time: str
    :param latest_delivery_time: The latest delivery time.
    :type latest_delivery_time: str
    :param expiration_time: The expiration time of the fulfillment option.
    :type expiration_time: str
    :param fulfillment_plans: A list of fulfillment plans in this fulfillment option.
    :type fulfillment_plans: list[~oscp.dataplane.models.FulfillmentPlan]
    """

    _attribute_map = {
        'fulfillment_option_id': {'key': 'fulfillmentOptionId', 'type': 'str'},
        'shipment_to_location': {'key': 'shipmentToLocation', 'type': 'Location'},
        'overall_cost': {'key': 'overallCost', 'type': 'Amount'},
        'earliest_delivery_time': {'key': 'earliestDeliveryTime', 'type': 'str'},
        'latest_delivery_time': {'key': 'latestDeliveryTime', 'type': 'str'},
        'expiration_time': {'key': 'expirationTime', 'type': 'str'},
        'fulfillment_plans': {'key': 'fulfillmentPlans', 'type': '[FulfillmentPlan]'},
    }

    def __init__(
        self,
        *,
        fulfillment_option_id: Optional[str] = None,
        shipment_to_location: Optional["Location"] = None,
        overall_cost: Optional["Amount"] = None,
        earliest_delivery_time: Optional[str] = None,
        latest_delivery_time: Optional[str] = None,
        expiration_time: Optional[str] = None,
        fulfillment_plans: Optional[List["FulfillmentPlan"]] = None,
        **kwargs
    ):
        super(FulfillmentOption, self).__init__(**kwargs)
        self.fulfillment_option_id = fulfillment_option_id
        self.shipment_to_location = shipment_to_location
        self.overall_cost = overall_cost
        self.earliest_delivery_time = earliest_delivery_time
        self.latest_delivery_time = latest_delivery_time
        self.expiration_time = expiration_time
        self.fulfillment_plans = fulfillment_plans


class FulfillmentPlan(msrest.serialization.Model):
    """The planned or actual activities that are related to the fulfilment of an order.
These activities can include Pick List Creation, Pick List Execution, Packing and
Shipment of the item(s) to the final destination.

    :param id: The unique identifier of a fulfillment.
    :type id: str
    :param warehouse_id: The unique identifier of an warehouse.
    :type warehouse_id: str
    :param scheduled_execution_time:
    :type scheduled_execution_time: str
    :param shipments: The shipments of a fulfillment plan.
    :type shipments: list[~oscp.dataplane.models.Shipment]
    :param status: The status of the Fulfillment Plan.
    :type status: str
    :param status_reason:
    :type status_reason: str
    :param creation_time: The timestamp that the Fulfillment Plan was created.
    :type creation_time: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'warehouse_id': {'key': 'warehouseId', 'type': 'str'},
        'scheduled_execution_time': {'key': 'scheduledExecutionTime', 'type': 'str'},
        'shipments': {'key': 'shipments', 'type': '[Shipment]'},
        'status': {'key': 'status', 'type': 'str'},
        'status_reason': {'key': 'statusReason', 'type': 'str'},
        'creation_time': {'key': 'creationTime', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        warehouse_id: Optional[str] = None,
        scheduled_execution_time: Optional[str] = None,
        shipments: Optional[List["Shipment"]] = None,
        status: Optional[str] = None,
        status_reason: Optional[str] = None,
        creation_time: Optional[str] = None,
        **kwargs
    ):
        super(FulfillmentPlan, self).__init__(**kwargs)
        self.id = id
        self.warehouse_id = warehouse_id
        self.scheduled_execution_time = scheduled_execution_time
        self.shipments = shipments
        self.status = status
        self.status_reason = status_reason
        self.creation_time = creation_time


class GenerateFulfillmentOptionsRequest(msrest.serialization.Model):
    """GenerateFulfillmentOptionsRequest.

    All required parameters must be populated in order to send to Azure.

    :param order_lines: Required.
    :type order_lines: list[~oscp.dataplane.models.OrderLine]
    :param shipment_to_location: Required. A location of a physical structure.
    :type shipment_to_location: ~oscp.dataplane.models.Location
    :param max_num_of_fulfillment_options: Required.
    :type max_num_of_fulfillment_options: int
    :param order_fulfillment_reference_data: Order fulfillment reference data is used to pass JIT
     fulfillment related information.
    :type order_fulfillment_reference_data: ~oscp.dataplane.models.OrderFulfillmentReferenceData
    :param notes:
    :type notes: list[~oscp.dataplane.models.Note]
    """

    _validation = {
        'order_lines': {'required': True},
        'shipment_to_location': {'required': True},
        'max_num_of_fulfillment_options': {'required': True, 'maximum': 100, 'minimum': 0},
    }

    _attribute_map = {
        'order_lines': {'key': 'orderLines', 'type': '[OrderLine]'},
        'shipment_to_location': {'key': 'shipmentToLocation', 'type': 'Location'},
        'max_num_of_fulfillment_options': {'key': 'maxNumOfFulfillmentOptions', 'type': 'int'},
        'order_fulfillment_reference_data': {'key': 'orderFulfillmentReferenceData', 'type': 'OrderFulfillmentReferenceData'},
        'notes': {'key': 'notes', 'type': '[Note]'},
    }

    def __init__(
        self,
        *,
        order_lines: List["OrderLine"],
        shipment_to_location: "Location",
        max_num_of_fulfillment_options: int,
        order_fulfillment_reference_data: Optional["OrderFulfillmentReferenceData"] = None,
        notes: Optional[List["Note"]] = None,
        **kwargs
    ):
        super(GenerateFulfillmentOptionsRequest, self).__init__(**kwargs)
        self.order_lines = order_lines
        self.shipment_to_location = shipment_to_location
        self.max_num_of_fulfillment_options = max_num_of_fulfillment_options
        self.order_fulfillment_reference_data = order_fulfillment_reference_data
        self.notes = notes


class GenerateFulfillmentOptionsResponse(msrest.serialization.Model):
    """GenerateFulfillmentOptionsResponse.

    :param fulfillment_options:
    :type fulfillment_options: list[~oscp.dataplane.models.FulfillmentOption]
    """

    _attribute_map = {
        'fulfillment_options': {'key': 'fulfillmentOptions', 'type': '[FulfillmentOption]'},
    }

    def __init__(
        self,
        *,
        fulfillment_options: Optional[List["FulfillmentOption"]] = None,
        **kwargs
    ):
        super(GenerateFulfillmentOptionsResponse, self).__init__(**kwargs)
        self.fulfillment_options = fulfillment_options


class HoursOfOperation(msrest.serialization.Model):
    """Operation time in a day of week.

    :param day_of_week_name: The day of week.
    :type day_of_week_name: str
    :param start_time: The start time.
    :type start_time: str
    :param end_time: The end time.
    :type end_time: str
    """

    _attribute_map = {
        'day_of_week_name': {'key': 'dayOfWeekName', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        day_of_week_name: Optional[str] = None,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        **kwargs
    ):
        super(HoursOfOperation, self).__init__(**kwargs)
        self.day_of_week_name = day_of_week_name
        self.start_time = start_time
        self.end_time = end_time


class Item(msrest.serialization.Model):
    """Something that is inventoried. A SKU, Stock keeping unit, refers to a specific item in a specific unit of measure.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the Item.
    :type name: str
    :param description: The description of the Item.
    :type description: str
    :param barcodes: A list of item's barcodes.
    :type barcodes: list[~oscp.dataplane.models.Barcode]
    :param weight: Required. The standard item weight.
    :type weight: float
    :param length: Required. The standard item length.
    :type length: float
    :param width: Required. The standard item width.
    :type width: float
    :param depth: Required. The standard item depth.
    :type depth: float
    :param lwh_unit_of_measure: Required. The length , width and height unit of measure.
    :type lwh_unit_of_measure: ~oscp.dataplane.models.UnitOfMeasure
    :param weight_unit_of_measure: Required. The weight unit of measure.
    :type weight_unit_of_measure: ~oscp.dataplane.models.UnitOfMeasure
    :param last_modified_time: Gets or sets the lastmodified time.
    :type last_modified_time: ~datetime.datetime
    :param sku: Required. The Stock Keeping Unit identifier, which is typically used for inventory-
     related activities.
    :type sku: str
    :param labels:
    :type labels: list[str]
    """

    _validation = {
        'name': {'required': True, 'min_length': 1},
        'weight': {'required': True, 'minimum': 0},
        'length': {'required': True, 'minimum': 0},
        'width': {'required': True, 'minimum': 0},
        'depth': {'required': True, 'minimum': 0},
        'lwh_unit_of_measure': {'required': True},
        'weight_unit_of_measure': {'required': True},
        'sku': {'required': True, 'max_length': 128, 'min_length': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'barcodes': {'key': 'barcodes', 'type': '[Barcode]'},
        'weight': {'key': 'weight', 'type': 'float'},
        'length': {'key': 'length', 'type': 'float'},
        'width': {'key': 'width', 'type': 'float'},
        'depth': {'key': 'depth', 'type': 'float'},
        'lwh_unit_of_measure': {'key': 'lwhUnitOfMeasure', 'type': 'UnitOfMeasure'},
        'weight_unit_of_measure': {'key': 'weightUnitOfMeasure', 'type': 'UnitOfMeasure'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
        'sku': {'key': 'sku', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        name: str,
        weight: float,
        length: float,
        width: float,
        depth: float,
        lwh_unit_of_measure: "UnitOfMeasure",
        weight_unit_of_measure: "UnitOfMeasure",
        sku: str,
        description: Optional[str] = None,
        barcodes: Optional[List["Barcode"]] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        labels: Optional[List[str]] = None,
        **kwargs
    ):
        super(Item, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.barcodes = barcodes
        self.weight = weight
        self.length = length
        self.width = width
        self.depth = depth
        self.lwh_unit_of_measure = lwh_unit_of_measure
        self.weight_unit_of_measure = weight_unit_of_measure
        self.last_modified_time = last_modified_time
        self.sku = sku
        self.labels = labels


class ItemReferenceData(msrest.serialization.Model):
    """ItemReferenceData.

    :param items:
    :type items: list[~oscp.dataplane.models.Item]
    """

    _attribute_map = {
        'items': {'key': 'items', 'type': '[Item]'},
    }

    def __init__(
        self,
        *,
        items: Optional[List["Item"]] = None,
        **kwargs
    ):
        super(ItemReferenceData, self).__init__(**kwargs)
        self.items = items


class Location(msrest.serialization.Model):
    """A location of a physical structure.

    All required parameters must be populated in order to send to Azure.

    :param time_zone_name: The unique identifier of a timezone.
    :type time_zone_name: str
    :param address_line1: Required. The primary address.
    :type address_line1: str
    :param address_line2: The secondary address.
    :type address_line2: str
    :param city_name: Required. The 'city' component of a location.
    :type city_name: str
    :param state_name: Required. The state or province name.
    :type state_name: str
    :param country_name: Required. The country name.
    :type country_name: str
    :param postal_code: Required. The postal code.
    :type postal_code: str
    :param notes: A list of Location notes.
    :type notes: list[~oscp.dataplane.models.Note]
    """

    _validation = {
        'address_line1': {'required': True, 'min_length': 1},
        'city_name': {'required': True, 'min_length': 1},
        'state_name': {'required': True, 'min_length': 1},
        'country_name': {'required': True, 'min_length': 1},
        'postal_code': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'time_zone_name': {'key': 'timeZoneName', 'type': 'str'},
        'address_line1': {'key': 'addressLine1', 'type': 'str'},
        'address_line2': {'key': 'addressLine2', 'type': 'str'},
        'city_name': {'key': 'cityName', 'type': 'str'},
        'state_name': {'key': 'stateName', 'type': 'str'},
        'country_name': {'key': 'countryName', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'notes': {'key': 'notes', 'type': '[Note]'},
    }

    def __init__(
        self,
        *,
        address_line1: str,
        city_name: str,
        state_name: str,
        country_name: str,
        postal_code: str,
        time_zone_name: Optional[str] = None,
        address_line2: Optional[str] = None,
        notes: Optional[List["Note"]] = None,
        **kwargs
    ):
        super(Location, self).__init__(**kwargs)
        self.time_zone_name = time_zone_name
        self.address_line1 = address_line1
        self.address_line2 = address_line2
        self.city_name = city_name
        self.state_name = state_name
        self.country_name = country_name
        self.postal_code = postal_code
        self.notes = notes


class Note(msrest.serialization.Model):
    """A generic object that contains a name value pair, can be used to store non first-class properties or metadata.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of note.
    :type name: str
    :param value: Required. The value of note.
    :type value: str
    """

    _validation = {
        'name': {'required': True, 'min_length': 1},
        'value': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        value: str,
        **kwargs
    ):
        super(Note, self).__init__(**kwargs)
        self.name = name
        self.value = value


class OrderFulfillment(msrest.serialization.Model):
    """OrderFulfillment.

    All required parameters must be populated in order to send to Azure.

    :param order_lines: Required.
    :type order_lines: list[~oscp.dataplane.models.OrderLine]
    :param shipment_to_location: Required. A location of a physical structure.
    :type shipment_to_location: ~oscp.dataplane.models.Location
    :param shipment_to_name:
    :type shipment_to_name: str
    :param shipment_receiver_contact:
    :type shipment_receiver_contact: str
    :param status:
    :type status: str
    :param id:
    :type id: str
    :param fulfillment_plan_ids:
    :type fulfillment_plan_ids: list[str]
    :param creation_time: Required.
    :type creation_time: ~datetime.datetime
    :param last_modified_time: Required.
    :type last_modified_time: ~datetime.datetime
    :param notes:
    :type notes: list[~oscp.dataplane.models.Note]
    """

    _validation = {
        'order_lines': {'required': True},
        'shipment_to_location': {'required': True},
        'id': {'max_length': 128, 'min_length': 0},
        'creation_time': {'required': True},
        'last_modified_time': {'required': True},
    }

    _attribute_map = {
        'order_lines': {'key': 'orderLines', 'type': '[OrderLine]'},
        'shipment_to_location': {'key': 'shipmentToLocation', 'type': 'Location'},
        'shipment_to_name': {'key': 'shipmentToName', 'type': 'str'},
        'shipment_receiver_contact': {'key': 'shipmentReceiverContact', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'fulfillment_plan_ids': {'key': 'fulfillmentPlanIds', 'type': '[str]'},
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
        'notes': {'key': 'notes', 'type': '[Note]'},
    }

    def __init__(
        self,
        *,
        order_lines: List["OrderLine"],
        shipment_to_location: "Location",
        creation_time: datetime.datetime,
        last_modified_time: datetime.datetime,
        shipment_to_name: Optional[str] = None,
        shipment_receiver_contact: Optional[str] = None,
        status: Optional[str] = None,
        id: Optional[str] = None,
        fulfillment_plan_ids: Optional[List[str]] = None,
        notes: Optional[List["Note"]] = None,
        **kwargs
    ):
        super(OrderFulfillment, self).__init__(**kwargs)
        self.order_lines = order_lines
        self.shipment_to_location = shipment_to_location
        self.shipment_to_name = shipment_to_name
        self.shipment_receiver_contact = shipment_receiver_contact
        self.status = status
        self.id = id
        self.fulfillment_plan_ids = fulfillment_plan_ids
        self.creation_time = creation_time
        self.last_modified_time = last_modified_time
        self.notes = notes


class OrderFulfillmentReferenceData(msrest.serialization.Model):
    """Order fulfillment reference data is used to pass JIT fulfillment related information.

    :param item_reference_data: A list of Item related JIT data.
    :type item_reference_data: ~oscp.dataplane.models.ItemReferenceData
    :param warehouse_item_reference_data: Warehouse item related JIT data.
    :type warehouse_item_reference_data: ~oscp.dataplane.models.WarehouseItemReferenceData
    """

    _attribute_map = {
        'item_reference_data': {'key': 'itemReferenceData', 'type': 'ItemReferenceData'},
        'warehouse_item_reference_data': {'key': 'warehouseItemReferenceData', 'type': 'WarehouseItemReferenceData'},
    }

    def __init__(
        self,
        *,
        item_reference_data: Optional["ItemReferenceData"] = None,
        warehouse_item_reference_data: Optional["WarehouseItemReferenceData"] = None,
        **kwargs
    ):
        super(OrderFulfillmentReferenceData, self).__init__(**kwargs)
        self.item_reference_data = item_reference_data
        self.warehouse_item_reference_data = warehouse_item_reference_data


class OrderLine(msrest.serialization.Model):
    """A document or commission by the customer to order item.

    All required parameters must be populated in order to send to Azure.

    :param order_id: Required. The unique number that identifies an Order.
    :type order_id: str
    :param item_sku: Required. The item's SKU.
    :type item_sku: str
    :param quantity: Required. The quantity of items.
    :type quantity: int
    :param planned_earliest_delivery_date_time: The earliest datetime that the order should be
     delivered.
    :type planned_earliest_delivery_date_time: str
    :param planned_latest_delivery_date_time: Required. The latest datetime that the order should
     be delivered.
    :type planned_latest_delivery_date_time: str
    """

    _validation = {
        'order_id': {'required': True, 'max_length': 128, 'min_length': 1},
        'item_sku': {'required': True, 'max_length': 128, 'min_length': 1},
        'quantity': {'required': True, 'maximum': 2147483647, 'minimum': 1},
        'planned_latest_delivery_date_time': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'order_id': {'key': 'orderId', 'type': 'str'},
        'item_sku': {'key': 'itemSKU', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'int'},
        'planned_earliest_delivery_date_time': {'key': 'plannedEarliestDeliveryDateTime', 'type': 'str'},
        'planned_latest_delivery_date_time': {'key': 'plannedLatestDeliveryDateTime', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        order_id: str,
        item_sku: str,
        quantity: int,
        planned_latest_delivery_date_time: str,
        planned_earliest_delivery_date_time: Optional[str] = None,
        **kwargs
    ):
        super(OrderLine, self).__init__(**kwargs)
        self.order_id = order_id
        self.item_sku = item_sku
        self.quantity = quantity
        self.planned_earliest_delivery_date_time = planned_earliest_delivery_date_time
        self.planned_latest_delivery_date_time = planned_latest_delivery_date_time


class SchemaReference(msrest.serialization.Model):
    """SchemaReference.

    All required parameters must be populated in order to send to Azure.

    :param data_model_id: Required. Gets or sets the dataModelId.
    :type data_model_id: str
    :param data_model_version: Gets or sets the dataModelVersion.
    :type data_model_version: str
    :param data_model_type: Gets or sets the dataModelType.
    :type data_model_type: str
    """

    _validation = {
        'data_model_id': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'data_model_id': {'key': 'dataModelId', 'type': 'str'},
        'data_model_version': {'key': 'dataModelVersion', 'type': 'str'},
        'data_model_type': {'key': 'dataModelType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_model_id: str,
        data_model_version: Optional[str] = None,
        data_model_type: Optional[str] = None,
        **kwargs
    ):
        super(SchemaReference, self).__init__(**kwargs)
        self.data_model_id = data_model_id
        self.data_model_version = data_model_version
        self.data_model_type = data_model_type


class Shipment(msrest.serialization.Model):
    """A quantity of items, goods or bulk cargo that are shipped together.

    All required parameters must be populated in order to send to Azure.

    :param shipment_id: The unique identifier of a Shipment.
    :type shipment_id: str
    :param shipment_items: The list of items to be shipped as part of the shipment.
    :type shipment_items: list[~oscp.dataplane.models.ShipmentItem]
    :param width: Required. The shipment package width.
    :type width: float
    :param height: Required. The shipment package height.
    :type height: float
    :param length: Required. The shipment package length.
    :type length: float
    :param weight: Required. The shipment package weight.
    :type weight: float
    :param lwh_unit_of_measure: The length , width and height unit of measure.
    :type lwh_unit_of_measure: ~oscp.dataplane.models.UnitOfMeasure
    :param weight_unit_of_measure: The weight unit of measure.
    :type weight_unit_of_measure: ~oscp.dataplane.models.UnitOfMeasure
    :param from_location: The pickup location of the shipment.
    :type from_location: ~oscp.dataplane.models.Location
    :param shipment_to_location: The delivery location of the shipment.
    :type shipment_to_location: ~oscp.dataplane.models.Location
    :param shipment_to_name: The name of the Shipment receiver in last mile delivery.
    :type shipment_to_name: str
    :param shipment_receiver_contact: The contact of the Shipment receiver in last mile delivery.
    :type shipment_receiver_contact: str
    :param planned_ship_time_stamp: The planned timestamp of shipment.
    :type planned_ship_time_stamp: str
    :param planned_earliest_delivery_time_stamp: The earliest that the shipment can be delivered.
    :type planned_earliest_delivery_time_stamp: str
    :param planned_latest_delivery_time_stamp: The latest that the shipment can be delivered.
    :type planned_latest_delivery_time_stamp: str
    :param estimated_cost: The estimated shipment cost amount.
    :type estimated_cost: ~oscp.dataplane.models.Amount
    :param tracking_number: Unique shipment identifier for delivery tracking purpose.
    :type tracking_number: str
    :param shipment_status: The delivery status of the shipment.
    :type shipment_status: str
    :param carrier_name: The carrier name for the shipment.
    :type carrier_name: str
    :param notes:
    :type notes: list[~oscp.dataplane.models.Note]
    :param last_modified_time: Gets or sets the lastmodified time.
    :type last_modified_time: ~datetime.datetime
    """

    _validation = {
        'shipment_id': {'max_length': 128, 'min_length': 0},
        'width': {'required': True, 'minimum': 0},
        'height': {'required': True, 'minimum': 0},
        'length': {'required': True, 'minimum': 0},
        'weight': {'required': True, 'minimum': 0},
    }

    _attribute_map = {
        'shipment_id': {'key': 'shipmentId', 'type': 'str'},
        'shipment_items': {'key': 'shipmentItems', 'type': '[ShipmentItem]'},
        'width': {'key': 'width', 'type': 'float'},
        'height': {'key': 'height', 'type': 'float'},
        'length': {'key': 'length', 'type': 'float'},
        'weight': {'key': 'weight', 'type': 'float'},
        'lwh_unit_of_measure': {'key': 'lwhUnitOfMeasure', 'type': 'UnitOfMeasure'},
        'weight_unit_of_measure': {'key': 'weightUnitOfMeasure', 'type': 'UnitOfMeasure'},
        'from_location': {'key': 'fromLocation', 'type': 'Location'},
        'shipment_to_location': {'key': 'shipmentToLocation', 'type': 'Location'},
        'shipment_to_name': {'key': 'shipmentToName', 'type': 'str'},
        'shipment_receiver_contact': {'key': 'shipmentReceiverContact', 'type': 'str'},
        'planned_ship_time_stamp': {'key': 'plannedShipTimeStamp', 'type': 'str'},
        'planned_earliest_delivery_time_stamp': {'key': 'plannedEarliestDeliveryTimeStamp', 'type': 'str'},
        'planned_latest_delivery_time_stamp': {'key': 'plannedLatestDeliveryTimeStamp', 'type': 'str'},
        'estimated_cost': {'key': 'estimatedCost', 'type': 'Amount'},
        'tracking_number': {'key': 'trackingNumber', 'type': 'str'},
        'shipment_status': {'key': 'shipmentStatus', 'type': 'str'},
        'carrier_name': {'key': 'carrierName', 'type': 'str'},
        'notes': {'key': 'notes', 'type': '[Note]'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        width: float,
        height: float,
        length: float,
        weight: float,
        shipment_id: Optional[str] = None,
        shipment_items: Optional[List["ShipmentItem"]] = None,
        lwh_unit_of_measure: Optional["UnitOfMeasure"] = None,
        weight_unit_of_measure: Optional["UnitOfMeasure"] = None,
        from_location: Optional["Location"] = None,
        shipment_to_location: Optional["Location"] = None,
        shipment_to_name: Optional[str] = None,
        shipment_receiver_contact: Optional[str] = None,
        planned_ship_time_stamp: Optional[str] = None,
        planned_earliest_delivery_time_stamp: Optional[str] = None,
        planned_latest_delivery_time_stamp: Optional[str] = None,
        estimated_cost: Optional["Amount"] = None,
        tracking_number: Optional[str] = None,
        shipment_status: Optional[str] = None,
        carrier_name: Optional[str] = None,
        notes: Optional[List["Note"]] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(Shipment, self).__init__(**kwargs)
        self.shipment_id = shipment_id
        self.shipment_items = shipment_items
        self.width = width
        self.height = height
        self.length = length
        self.weight = weight
        self.lwh_unit_of_measure = lwh_unit_of_measure
        self.weight_unit_of_measure = weight_unit_of_measure
        self.from_location = from_location
        self.shipment_to_location = shipment_to_location
        self.shipment_to_name = shipment_to_name
        self.shipment_receiver_contact = shipment_receiver_contact
        self.planned_ship_time_stamp = planned_ship_time_stamp
        self.planned_earliest_delivery_time_stamp = planned_earliest_delivery_time_stamp
        self.planned_latest_delivery_time_stamp = planned_latest_delivery_time_stamp
        self.estimated_cost = estimated_cost
        self.tracking_number = tracking_number
        self.shipment_status = shipment_status
        self.carrier_name = carrier_name
        self.notes = notes
        self.last_modified_time = last_modified_time


class ShipmentItem(msrest.serialization.Model):
    """ShipmentItem.

    :param order_line: The corresponding orderline of the item.
    :type order_line: ~oscp.dataplane.models.OrderLine
    """

    _attribute_map = {
        'order_line': {'key': 'orderLine', 'type': 'OrderLine'},
    }

    def __init__(
        self,
        *,
        order_line: Optional["OrderLine"] = None,
        **kwargs
    ):
        super(ShipmentItem, self).__init__(**kwargs)
        self.order_line = order_line


class Transformer(msrest.serialization.Model):
    """Transformer.

    :param type:
    :type type: str
    :param type_properties: Properties pertaining to the transformer type.
    :type type_properties: dict[str, str]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'type_properties': {'key': 'typeProperties', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        type_properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(Transformer, self).__init__(**kwargs)
        self.type = type
        self.type_properties = type_properties


class UnitOfMeasure(msrest.serialization.Model):
    """UnitOfMeasure.

    All required parameters must be populated in order to send to Azure.

    :param abbreviation: Required. The abbreviation of the unit of measure.
    :type abbreviation: str
    """

    _validation = {
        'abbreviation': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'abbreviation': {'key': 'abbreviation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        abbreviation: str,
        **kwargs
    ):
        super(UnitOfMeasure, self).__init__(**kwargs)
        self.abbreviation = abbreviation


class Warehouse(BaseNode):
    """Warehouse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The node identifier.
    :type id: str
    :param hours_of_operations: Required. A list of operation times.
    :type hours_of_operations: list[~oscp.dataplane.models.HoursOfOperation]
    :param location: Required. A location of a physical structure.
    :type location: ~oscp.dataplane.models.Location
    :param labels:
    :type labels: list[str]
    :param last_modified_time:
    :type last_modified_time: ~datetime.datetime
    :param pick_and_pack_lead_time: Required. Gets or sets the PickAndPackLeadTime which is the
     number of hours required by Warehouse to pick and pack the item.
    :type pick_and_pack_lead_time: int
    :param carrier_references: Required. The list of Carrier info.
    :type carrier_references: list[~oscp.dataplane.models.CarrierReference]
    """

    _validation = {
        'id': {'required': True, 'min_length': 1},
        'hours_of_operations': {'required': True},
        'location': {'required': True},
        'pick_and_pack_lead_time': {'required': True},
        'carrier_references': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'hours_of_operations': {'key': 'hoursOfOperations', 'type': '[HoursOfOperation]'},
        'location': {'key': 'location', 'type': 'Location'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
        'pick_and_pack_lead_time': {'key': 'pickAndPackLeadTime', 'type': 'int'},
        'carrier_references': {'key': 'carrierReferences', 'type': '[CarrierReference]'},
    }

    def __init__(
        self,
        *,
        id: str,
        hours_of_operations: List["HoursOfOperation"],
        location: "Location",
        pick_and_pack_lead_time: int,
        carrier_references: List["CarrierReference"],
        labels: Optional[List[str]] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(Warehouse, self).__init__(id=id, hours_of_operations=hours_of_operations, location=location, labels=labels, last_modified_time=last_modified_time, **kwargs)
        self.pick_and_pack_lead_time = pick_and_pack_lead_time
        self.carrier_references = carrier_references


class WarehouseItem(msrest.serialization.Model):
    """WarehouseItem.

    All required parameters must be populated in order to send to Azure.

    :param available_to_promise_quantity: Required. The quantity.
    :type available_to_promise_quantity: int
    :param item_sku: Required. The Item's SKU.
    :type item_sku: str
    :param warehouse_id: The Item's SKU.
    :type warehouse_id: str
    :param last_modified_time: Gets or sets the lastmodified time this WarehouseItem was obtained.
    :type last_modified_time: ~datetime.datetime
    """

    _validation = {
        'available_to_promise_quantity': {'required': True, 'maximum': 2147483647, 'minimum': 0},
        'item_sku': {'required': True, 'max_length': 128, 'min_length': 1},
        'warehouse_id': {'max_length': 128, 'min_length': 0},
    }

    _attribute_map = {
        'available_to_promise_quantity': {'key': 'availableToPromiseQuantity', 'type': 'int'},
        'item_sku': {'key': 'itemSKU', 'type': 'str'},
        'warehouse_id': {'key': 'warehouseId', 'type': 'str'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        available_to_promise_quantity: int,
        item_sku: str,
        warehouse_id: Optional[str] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(WarehouseItem, self).__init__(**kwargs)
        self.available_to_promise_quantity = available_to_promise_quantity
        self.item_sku = item_sku
        self.warehouse_id = warehouse_id
        self.last_modified_time = last_modified_time


class WarehouseItemReferenceData(msrest.serialization.Model):
    """WarehouseItemReferenceData.

    :param available_warehouse_items_data:
    :type available_warehouse_items_data: list[~oscp.dataplane.models.AvailableWarehouseItems]
    """

    _attribute_map = {
        'available_warehouse_items_data': {'key': 'availableWarehouseItemsData', 'type': '[AvailableWarehouseItems]'},
    }

    def __init__(
        self,
        *,
        available_warehouse_items_data: Optional[List["AvailableWarehouseItems"]] = None,
        **kwargs
    ):
        super(WarehouseItemReferenceData, self).__init__(**kwargs)
        self.available_warehouse_items_data = available_warehouse_items_data
