# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.2.1, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.core import AsyncPipelineClient
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from msrest import Deserializer, Serializer

from ._configuration import OpenSupplyChainPlatformServiceAPIConfiguration
from .operations import CarrierOperations
from .operations import DataInflowOperations
from .operations import DataInflowRunOperations
from .operations import DataOutflowOperations
from .operations import DataOutflowRunOperations
from .operations import DatasetOperations
from .operations import DeliveryNodeOperations
from .operations import FulfillmentOptionOperations
from .operations import FulfillmentPlanOperations
from .operations import ItemOperations
from .operations import OrderFulfillmentOperations
from .operations import WarehouseOperations
from .operations import WarehouseItemOperations
from .. import models


class OpenSupplyChainPlatformServiceAPI(object):
    """Open Supply Chain Platform Service API.

    :ivar carrier: CarrierOperations operations
    :vartype carrier: oscp.dataplane.aio.operations.CarrierOperations
    :ivar data_inflow: DataInflowOperations operations
    :vartype data_inflow: oscp.dataplane.aio.operations.DataInflowOperations
    :ivar data_inflow_run: DataInflowRunOperations operations
    :vartype data_inflow_run: oscp.dataplane.aio.operations.DataInflowRunOperations
    :ivar data_outflow: DataOutflowOperations operations
    :vartype data_outflow: oscp.dataplane.aio.operations.DataOutflowOperations
    :ivar data_outflow_run: DataOutflowRunOperations operations
    :vartype data_outflow_run: oscp.dataplane.aio.operations.DataOutflowRunOperations
    :ivar dataset: DatasetOperations operations
    :vartype dataset: oscp.dataplane.aio.operations.DatasetOperations
    :ivar delivery_node: DeliveryNodeOperations operations
    :vartype delivery_node: oscp.dataplane.aio.operations.DeliveryNodeOperations
    :ivar fulfillment_option: FulfillmentOptionOperations operations
    :vartype fulfillment_option: oscp.dataplane.aio.operations.FulfillmentOptionOperations
    :ivar fulfillment_plan: FulfillmentPlanOperations operations
    :vartype fulfillment_plan: oscp.dataplane.aio.operations.FulfillmentPlanOperations
    :ivar item: ItemOperations operations
    :vartype item: oscp.dataplane.aio.operations.ItemOperations
    :ivar order_fulfillment: OrderFulfillmentOperations operations
    :vartype order_fulfillment: oscp.dataplane.aio.operations.OrderFulfillmentOperations
    :ivar warehouse: WarehouseOperations operations
    :vartype warehouse: oscp.dataplane.aio.operations.WarehouseOperations
    :ivar warehouse_item: WarehouseItemOperations operations
    :vartype warehouse_item: oscp.dataplane.aio.operations.WarehouseItemOperations
    :param str base_url: Service URL
    """

    def __init__(
        self,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://7ab4ba6c-ffd5-4790-85ce-2d0f63d33750-workspace.supplychain.azure-test.net/'
        self._config = OpenSupplyChainPlatformServiceAPIConfiguration(**kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.carrier = CarrierOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_inflow = DataInflowOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_inflow_run = DataInflowRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_outflow = DataOutflowOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_outflow_run = DataOutflowRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.dataset = DatasetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.delivery_node = DeliveryNodeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.fulfillment_option = FulfillmentOptionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.fulfillment_plan = FulfillmentPlanOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.item = ItemOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.order_fulfillment = OrderFulfillmentOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.warehouse = WarehouseOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.warehouse_item = WarehouseItemOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def _send_request(self, http_request: HttpRequest, **kwargs: Any) -> AsyncHttpResponse:
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.AsyncHttpResponse
        """
        http_request.url = self._client.format_url(http_request.url)
        stream = kwargs.pop("stream", True)
        pipeline_response = await self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "OpenSupplyChainPlatformServiceAPI":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
