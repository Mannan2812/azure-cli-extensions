# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.2.1, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class OrderFulfillmentOperations:
    """OrderFulfillmentOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~oscp.dataplane.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def accept_new_order_fulfillment(
        self,
        order_fulfillment_id: str,
        order_fulfillment: "_models.OrderFulfillment",
        **kwargs
    ) -> Union["_models.OrderFulfillment", "_models.ErrorObject"]:
        """accept_new_order_fulfillment.

        :param order_fulfillment_id:
        :type order_fulfillment_id: str
        :param order_fulfillment:
        :type order_fulfillment: ~oscp.dataplane.models.OrderFulfillment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OrderFulfillment or ErrorObject, or the result of cls(response)
        :rtype: ~oscp.dataplane.models.OrderFulfillment or ~oscp.dataplane.models.ErrorObject
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.OrderFulfillment", "_models.ErrorObject"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = self.accept_new_order_fulfillment.metadata['url']  # type: ignore
        path_format_arguments = {
            'orderFulfillmentId': self._serialize.url("order_fulfillment_id", order_fulfillment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(order_fulfillment, 'OrderFulfillment')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201, 449]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 201:
            deserialized = self._deserialize('OrderFulfillment', pipeline_response)

        if response.status_code == 449:
            response_headers['x-ms-retry-after-ms']=self._deserialize('int', response.headers.get('x-ms-retry-after-ms'))
            deserialized = self._deserialize('ErrorObject', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    accept_new_order_fulfillment.metadata = {'url': '/orderFulfillments/{orderFulfillmentId}'}  # type: ignore

    async def get_order_fulfillment(
        self,
        order_fulfillment_id: str,
        **kwargs
    ) -> "_models.OrderFulfillment":
        """get_order_fulfillment.

        :param order_fulfillment_id:
        :type order_fulfillment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OrderFulfillment, or the result of cls(response)
        :rtype: ~oscp.dataplane.models.OrderFulfillment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.OrderFulfillment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview"
        accept = "application/json, text/json"

        # Construct URL
        url = self.get_order_fulfillment.metadata['url']  # type: ignore
        path_format_arguments = {
            'orderFulfillmentId': self._serialize.url("order_fulfillment_id", order_fulfillment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('OrderFulfillment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_order_fulfillment.metadata = {'url': '/orderFulfillments/{orderFulfillmentId}'}  # type: ignore

    async def query_order_fulfillments(
        self,
        created_after: Optional[str] = None,
        created_before: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs
    ) -> List["_models.OrderFulfillment"]:
        """query_order_fulfillments.

        :param created_after:
        :type created_after: str
        :param created_before:
        :type created_before: str
        :param status:
        :type status: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of OrderFulfillment, or the result of cls(response)
        :rtype: list[~oscp.dataplane.models.OrderFulfillment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.OrderFulfillment"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview"
        accept = "application/json, text/json"

        # Construct URL
        url = self.query_order_fulfillments.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if created_after is not None:
            query_parameters['createdAfter'] = self._serialize.query("created_after", created_after, 'str')
        if created_before is not None:
            query_parameters['createdBefore'] = self._serialize.query("created_before", created_before, 'str')
        if status is not None:
            query_parameters['status'] = self._serialize.query("status", status, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[OrderFulfillment]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    query_order_fulfillments.metadata = {'url': '/orderFulfillments'}  # type: ignore

    async def cancel_order_fulfillment(
        self,
        order_fulfillment_id: str,
        **kwargs
    ) -> Union["_models.OrderFulfillment", "_models.ErrorObject"]:
        """cancel_order_fulfillment.

        :param order_fulfillment_id:
        :type order_fulfillment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OrderFulfillment or ErrorObject, or the result of cls(response)
        :rtype: ~oscp.dataplane.models.OrderFulfillment or ~oscp.dataplane.models.ErrorObject
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.OrderFulfillment", "_models.ErrorObject"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview"
        accept = "application/json, text/json"

        # Construct URL
        url = self.cancel_order_fulfillment.metadata['url']  # type: ignore
        path_format_arguments = {
            'orderFulfillmentId': self._serialize.url("order_fulfillment_id", order_fulfillment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 449]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            deserialized = self._deserialize('OrderFulfillment', pipeline_response)

        if response.status_code == 449:
            response_headers['x-ms-retry-after-ms']=self._deserialize('int', response.headers.get('x-ms-retry-after-ms'))
            deserialized = self._deserialize('ErrorObject', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    cancel_order_fulfillment.metadata = {'url': '/orderFulfillments/{orderFulfillmentId}/cancel'}  # type: ignore
